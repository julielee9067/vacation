"""
Django settings for isds project.

Generated by 'django-admin startproject' using Django 3.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from utils import logger
from .private_settings import (
    MY_HOSTS,
    SECRET_KEY,
    DEBUG,
    MY_CLIENT_IPS,
    DATABASES,
    SLACK_TOKEN,
    SLACK_CHANNEL,
    SLACK_VACATION_CHANNEL,
)

# SECURITY WARNING: don't run with debug turned on in production!
# SECURITY WARNING: keep the secret key used in production secret!

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/


#
# MY_HOSTS에 정의한 값을 ALLOWED_HOSTS에 추가.
#
ALLOWED_HOSTS = ["localhost", "127.0.0.1"]

try:
    ALLOWED_HOSTS += MY_HOSTS

except ImportError:
    logger.info("MY_HOSTS is not set.")

except Exception as e:
    from .exception import print_exception

    logger.error(e)
    print_exception(exit=True)


#
# Debug Toolbar를 띄우기 위한 허용 IP 설정
# https://django-debug-toolbar.readthedocs.io/en/latest/installation.html
#
INTERNAL_IPS = ["127.0.0.1"]


#
# MY_CLIENT_IPS에 정의한 값을 ALLOWED_CLIENT_IPS에 추가.
#
ALLOWED_CLIENT_IPS = []

try:
    from .private_settings import MY_CLIENT_IPS

    ALLOWED_CLIENT_IPS += MY_CLIENT_IPS

except ImportError:
    logger.info("MY_HOSTS is not set.")

except Exception as e:
    from .exception import print_exception

    logger.error(e)
    print_exception(exit=True)


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "vacation",
    "core",
    "widget_tweaks",
    "debug_toolbar",
    "bootstrap4",
    "django_filters",
    "active_link",
    "django_slack",
    "tempus_dominus",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
]

ROOT_URLCONF = "isds.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "isds.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "ko"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles/")
STATIC_URL = "/static/"
# STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"

BOOTSTRAP4 = {
    "javascript_in_head": True,
    "include_jquery": True,
    "css_url": {
        "href": "https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css",
        "integrity": "sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh",
        "crossorigin": "anonymous",
    },
    "javascript_url": {
        "url": "https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js",
        "integrity": "sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6",
        "crossorigin": "anonymous",
    },
    "jquery_url": {
        "url": "https://code.jquery.com/jquery-3.4.1.min.js",
        "integrity": "sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=",
        "crossorigin": "anonymous",
    },
    "popper_url": {
        "url": "https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js",
        "integrity": "sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo",
        "crossorigin": "anonymous",
    },
}


# Django-slack 모듈 설정
# https://django-slack.readthedocs.io/

SLACK_BACKEND = "django_slack.backends.UrllibBackend"

#
# Session 설정
#
SESSION_SAVE_EVERY_REQUEST = True
